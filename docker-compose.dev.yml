services:
  postgres-auth:
    image: postgres:16-alpine
    container_name: hostyourbot-postgres-auth-dev
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  auth-service:
    build:
      context: ./auth-service
      target: development
    container_name: hostyourbot-auth-service-dev
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    volumes:
      - ./auth-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${AUTH_NODE_ENV}
      - PORT=${AUTH_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - DISCORD_CALLBACK_URL=${DISCORD_CALLBACK_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - CLIENT_URL=${CLIENT_URL}
      - NODE_OPTIONS=${NODE_OPTIONS}
      - LOGS_GRPC_URL=${LOGS_GRPC_URL}
      - K8S_SERVICE_URL=${K8S_SERVICE_URL}
      - MAIL_GRPC_URL=${MAIL_GRPC_URL}
    depends_on:
      postgres-auth:
        condition: service_healthy
    restart: unless-stopped

  logs-service:
    build:
      context: ./logs-service
      target: development
    container_name: hostyourbot-logs-service-dev
    ports:
      - "${LOGS_PORT}:${LOGS_PORT}"
      - "${LOGS_GRPC_PORT}:${LOGS_GRPC_PORT}"
    volumes:
      - ./logs-service:/app
      - logs-data:/app/data
    environment:
      - ENVIRONMENT=${LOGS_ENVIRONMENT}
      - PORT=${LOGS_PORT}
      - GRPC_PORT=${LOGS_GRPC_PORT}
      - DATABASE_PATH=${LOGS_DATABASE_PATH}
    restart: unless-stopped

  k8s-service:
    build:
      context: ./k8s-service
      target: development
    container_name: hostyourbot-k8s-service-dev
    ports:
      - "${K8S_PORT}:${K8S_PORT}"
      - "${K8S_GRPC_PORT}:${K8S_GRPC_PORT}"
    volumes:
      - ./k8s-service:/app
      - /app/node_modules
      - ./proto:/app/proto
    environment:
      - NODE_ENV=${K8S_NODE_ENV}
      - ENVIRONMENT=${K8S_ENVIRONMENT}
      - PORT=${K8S_PORT}
      - GRPC_PORT=${K8S_GRPC_PORT}
      - K8S_API_URL=${K8S_API_URL}
      - K8S_API_TOKEN=${K8S_API_TOKEN}
    restart: unless-stopped

  mail-service:
    build:
      context: ./mail-service
      target: development
    container_name: hostyourbot-mail-service-dev
    ports:
      - "${MAIL_GRPC_PORT}:${MAIL_GRPC_PORT}"
    volumes:
      - ./mail-service:/app
      - /app/node_modules
    environment:
      - ENVIRONMENT=${MAIL_ENVIRONMENT}
      - GRPC_PORT=${MAIL_GRPC_PORT}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
    restart: unless-stopped

  client:
    build:
      context: ./client
      target: development
    container_name: hostyourbot-client-dev
    ports:
      - "5173:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${CLIENT_NODE_ENV}
      - VITE_API_URL=${VITE_API_URL}
    stdin_open: true
    tty: true
    restart: unless-stopped

  webhook-service:
    build:
      context: ./webhook-service
      target: development
    container_name: hostyourbot-webhook-service-dev
    volumes:
      - ./webhook-service:/app
      - /app/node_modules
      - ./proto:/app/proto
    environment:
      - WEBHOOK_ENVIRONMENT=${WEBHOOK_ENVIRONMENT}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - K8S_GRPC_URL=${K8S_GRPC_URL}
      - STATS_CRON=${STATS_CRON}
      - CHECK_INTERVAL=${CHECK_INTERVAL}
      - CAPACITY_WARNING_THRESHOLD=${CAPACITY_WARNING_THRESHOLD}
      - CAPACITY_CRITICAL_THRESHOLD=${CAPACITY_CRITICAL_THRESHOLD}
      - PODS_WARNING_THRESHOLD=${PODS_WARNING_THRESHOLD}
    depends_on:
      - k8s-service
    restart: unless-stopped

  mongodb:
    image: mongo:7
    container_name: hostyourbot-mongodb-dev
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  builder-service:
    build:
      context: ./builder-service
      target: development
    container_name: hostyourbot-builder-service-dev
    ports:
      - "${BUILDER_PORT}:${BUILDER_PORT}"
    volumes:
      - ./builder-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${BUILDER_NODE_ENV}
      - PORT=${BUILDER_PORT}
      - MONGODB_URI=${MONGODB_URI}
      - CLIENT_URL=${CLIENT_URL}
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres-auth-data:
  logs-data:
  mongodb-data:
