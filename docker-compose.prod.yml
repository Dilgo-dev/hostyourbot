services:
  postgres-auth:
    image: postgres:16-alpine
    container_name: hostyourbot-postgres-auth-prod
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  auth-service:
    build:
      context: ./auth-service
      target: production
    container_name: hostyourbot-auth-service-prod
    expose:
      - "3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres-auth
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - DISCORD_CALLBACK_URL=${DISCORD_CALLBACK_URL}
      - CLIENT_URL=${CLIENT_URL}
      - LOGS_GRPC_URL=logs-service:50052
      - MAIL_GRPC_URL=mail-service:50053
    depends_on:
      postgres-auth:
        condition: service_healthy
    restart: unless-stopped

  logs-service:
    build:
      context: ./logs-service
      target: production
    container_name: hostyourbot-logs-service-prod
    expose:
      - "3002"
      - "50052"
    volumes:
      - logs-data:/root/data
    environment:
      - ENVIRONMENT=production
      - PORT=3002
      - GRPC_PORT=50052
      - DATABASE_PATH=/root/data/logs.db
    restart: unless-stopped

  k8s-service:
    build:
      context: .
      dockerfile: k8s-service/Dockerfile
      target: production
    container_name: hostyourbot-k8s-service-prod
    expose:
      - "3003"
      - "50054"
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=production
      - PORT=3003
      - GRPC_PORT=50054
      - K8S_API_URL=${K8S_API_URL}
      - K8S_API_TOKEN=${K8S_API_TOKEN}
    restart: unless-stopped

  mail-service:
    build:
      context: ./mail-service
      target: production
    container_name: hostyourbot-mail-service-prod
    expose:
      - "50053"
    environment:
      - ENVIRONMENT=production
      - GRPC_PORT=50053
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
    restart: unless-stopped

  client:
    build:
      context: ./client
      target: production
    container_name: hostyourbot-client-prod
    expose:
      - "80"
    environment:
      - NODE_ENV=production
    restart: unless-stopped

  webhook-service:
    build:
      context: .
      dockerfile: webhook-service/Dockerfile
      target: production
    container_name: hostyourbot-webhook-service-prod
    environment:
      - WEBHOOK_ENVIRONMENT=production
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - K8S_GRPC_URL=k8s-service:50054
      - STATS_CRON=${STATS_CRON}
      - CHECK_INTERVAL=${CHECK_INTERVAL}
      - CAPACITY_WARNING_THRESHOLD=${CAPACITY_WARNING_THRESHOLD}
      - CAPACITY_CRITICAL_THRESHOLD=${CAPACITY_CRITICAL_THRESHOLD}
      - PODS_WARNING_THRESHOLD=${PODS_WARNING_THRESHOLD}
    depends_on:
      - k8s-service
    restart: unless-stopped

  gateway:
    image: nginx:1.27-alpine
    container_name: hostyourbot-gateway-prod
    depends_on:
      - client
      - auth-service
      - logs-service
      - k8s-service
    volumes:
      - ./nginx/gateway.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "5176:80"
    restart: unless-stopped

volumes:
  postgres-auth-data:
  logs-data:
